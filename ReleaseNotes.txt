v0.7.0 | 2021.12.31
    Features
      * Added a Clipboard namespace providing access to the system clipboard
      * Added possibility to paste clipboard content onto Textbox instances using Ctrl+V
      * Added a Component abstract base class as the first step to moving to a component-based design
      * Added a Transform2DComponent class to which transformations can be applied
      * Added a Render2DComponent class indicating that the entity can be drawn to a framebuffer
      * Added a Collider2DComponent class that describe an entity's minimum and maximum coordinates
      * Added a Dropdown class representing a GUI dropdown menu/list
      * Expanded on the Textbox class by adding a caret that can be moved with the typical text-editor keys (arrow keys, home, end, clicking on the text)
      * Added a Cursor class used to change the appearance of the cursor into one of the standard OS cursors or a custom one
      * Added the most common easing functions to the Math namespace
    Updates
      - The Actor2D class has been replaced by the component-based Actor class
      - The Transformable2D and Renderable2D classes have been removed
      - The Shape abstract base class, its derived classes, the Sprite class, the Text class and the Camera class and its derived classes now derive from the Actor class
      - Font instances no longer enqueue an event so that text instances update their uv coordinates as disabled event handling often led to text artefacts. Instead, fonts and the text instances that depend on them are stored in the FontManager that indicates when to update.
      - Significant improvements to the TextureAtlas class where it no longer requires all added textures to remain alive after packing them together
      - Glyph instances no longer store their individual textures (the texture containing their respective glyph)
      - The Sprite class can now be inherited by user-created classes
	  - Sprite instances now longer check every frame whether their vertices need to be updated, the effects are instead applied immediately
      - The Transform2DComponent's origin flags are now set per origin type (translation, rotation and scale) instead of one origin for all types
      - The Matrix struct is now a class. The previously public members are now private and some constructors taking in specific elements and columns were removed
      - The minimum C++ version available is C++17 but takes advantage of C++20 when appropriate
    Bug Fixes
      ~ Fixed a bug which caused projection matrices to not be updated when the window was resized
      ~ Fixed a bug causing two or more State instances to be unable to render simultaneously
      ~ Fixed a bug which caused the transform to be recomputed every frame instead of whenever necessary

v0.6.0 | 2021.06.13
  Features
    * Added a ConvexShape class used to represent a 2D convex polygon with an arbitrary number of points
    * Added a BatchRenderer2D singleton class which sorts submissions assuring proper rendering order, the opaque instances are rendered back-to-front and trasparent ones front-to-back
    * Added a BasicRenderer2D singleton class which directly sets the render states provided and renders whatever geometry is provided to it
    * Added a constructor allowing a VideoMode to be created by passing an optional pointer to a Monitor or the primary monitor will be associated by default
    * Added static methods to retrieve pre-formatted current system date and time from the Time class
    * Added a PathDropEvent class allowing users to drop files onto the window
    * Added a bare-bones Textbox class representing a GUI textbox that can be written into
  Updates
    - GLResource instances are now movable and move-assignable
    - Texture2D instances are now movable and move-assignable
    - TextureAtlas instances are now movable and move-assignable
    - The Renderer2D singleton class is now an abstract base class for all derived 2D renderers
    - The DebugLogger's formatted logs' separators now cover their respective log's longest string
    - Improved the DebugLogger's documentation
    - Debug logs now display the current system date and time of the logged information
	- The z-index of the setPosition() method of the Transformable2D class that automatically handles z-ordering is now by default INT_MAX (from 0) to allow greater flexibility
  Bug Fixes
    ~ Fixed a bug which caused TextureAtlas instances to only create a R8 texture atlas
    ~ Fixed a bug which caused submissions in the Renderer2D to be needlessly recreated every frame
    ~ Corrected the Shader's code documentation
    ~ Fixed a bug which caused artifacts when rendering text
	~ Fixed a bug which caused Sprite instances to not be rendered if they weren't provided with a texture at construction

v0.5.0 | 2020.08.07
  Features
    * Added Z-ordering for all instances deriving from the Actor2D class (all children are now rendered on top of their parents)
    * Added automatic generation of an outline and uv coordinates for all classes deriving from the Shape abstract base class
    * Added the possibility to have rounded corners for the RectangleShape class
    * Added a RenderTexture class used for off-screen rendering
    * Added a Glyph class representing a glyph (a text character)
    * Added a TextureAtlas class used for dynamically generating a texture atlas during runtime
    * Added a Font class used to represent a font
    * Added a Text class used to represent a renderable string of characters
    * Added equality and inequality operators to the Matrix struct
    * Added a dirty render flag to the Renderable2D class used to inform the appropriate renderer to update its cached properties
    * Added a Widget abstract base class providing basic GUI functionalities
    * Added a Button class used to represent a GUI button
  Updates
    - Due to the addition of Z-ordering, the default Camera2D frustrum now ranges from -12000 to 1 permitting Actor2D instances to have a child depth of up to 12000
    - Due to the addition of Z-ordering, Vertex2D positions now possess a position along the Z axis (users can manually set the Z position, but it's not necessary)
    - Significantly improved the Renderer2D's performance by caching submissions and not recreating them every frame
    - VBOs can now also be retrieved from a VAO, and an IBO may also be attached to a VAO
    - Significantly improved mapping pixels to coordinates by caching the inverse projection matrices of the RenderTarget instances
    - Renderable2D and Transformable2D instances (including all derived classes) are no longer copyable or assignable
    - The mVertices and mIndices protected members (now private) in the Renderable2D class were replaced by the the getVertices() and getIndices() protected methods
    - The Actor2D event handling, updating and rendering methods no longer return a boolean as it proved to be unnecessary
  Bug Fixes
    ~ Fixed a bug which caused Shape and Sprite instances to have invalid uv coordinates and colors when their vertices were modified during runtime
    ~ Fixed a bug which caused a 16 bit-per-channel texture loaded from the disk to be created with 8 bits-per-channel
    ~ Fixed a bug which caused an infinite loop when the global transform of an Actor2D was requested
    ~ Fixed a bug which caused Actor2D instances to have incomplete transforms applied to them resulting in faulty rendering

v0.4.0 | 2020.05.27
  Features
    * Added a gl namespace that will contain error-checking and validity-checking OpenGL functions, and OpenGL type enumerations
    * Added a GLResource abstract base class used to represent an OpenGL resource
    * Added a Shader class that represents an OpenGL shader program
    * Added a GLResourceFactory singleton class that manages all GLResource instances, and provides several pre-compiled Shader objects
    * Added a VertexArray class that represents the vertex fetch stage and is used to supply input to the appropriate vertex shader
    * Added a Buffer base class representing a generalized OpenGL buffer that's used to supply data to OpenGL
    * Added a VertexBuffer class used to supply vertex data to a vertex shader
    * Added a BlendMode struct representing the blending function to use whilst rendering
    * Added a Camera abstract base class representing a camera/view of a scene
    * Added a Camera2D class representing a camera/view of a 2D scene
    * Added a Camera3D class representing a camera/view of a 3D scene
    * Added a CameraFPS class representing a camera/view of a 3D scene of which its rotation can be manipulated using the mouse cursor
    * Added a Transformable2D abstract base class used to represent 2D entities to which transformations can be applied (displacement, rotation, scaling)
    * Added a UniformBuffer class representing an OpenGL buffer used to supply uniform data to several shaders
    * Added a Texture abstract base class used to represent a texture storing image data
    * Added a Texture2D class used to represent a 2-dimensional texture storing 2D image data
    * Added an IndexBuffer class used to represent an OpenGL buffer containing vertex indices
    * Added a RenderStates struct used to set the OpenGL state prior to rendering
    * Added a Framebuffer class used for off-screen rendering
    * Added a RenderTarget abstract base class which is inherited by the Window and RenderTexture classes
    * Added an Actor2D class used in scene graph architecture and representing a 2D game object
    * Added a Renderable2D abstract base class representing 2D entities that can be rendered
    * Added a Renderer2D singleton class that accepts Renderable2Ds and renders them to a RenderTarget
    * Added a normal() function to the Vector2 class that computes the normal of a line segment
    * Added a Shape abstract base class used to represent 2D shapes
    * Added a RectangleShape class used to represent rectangles
    * Added a Sprite class used to represent sprites
  Updates
    - Improved speed of vector normalizations by ~2%
    - Improved speed of several global vector operators and functions by ~50%
    - Improved singularity-handling in the Quaternion's toEulerAngles() method
    - Improved the documentation of the Matrix's getSubmatrix() method clarifying that it used 0-based indexing
    - The Window class now inherits from the RenderTarget abstract base class
  Bug Fixes
    ~ Fixed certain documentation errors in Window/internal/InputManager.h, in System/Time.h and in System/FileSystem.h
    ~ Fixed a bug that caused inaccessible x and y members for Vector2 objects for files including Math/internal/Quaternion.h
    ~ Fixed a bug in the Matrix's getSubmatrix() method that caused it to support only square matrices
    ~ Fixed a bug in the Matrix's lookat() static method wherein one of the elements held the inversed sign
    ~ Fixed a bug in the Matrix's rotate() static method that caused it to return an erroneous result
    ~ Fixed a bug that caused the application to crash when a window was restored after being maximized due to faulty event creation

v0.3.0 | 2019.07.29
  Features
    * Added a Quaternion class used to represent a rotation whilst avoiding gimbal lock
    * Added a Monitor class used in the representation of a monitor of the application user's setup
    * Added a VideoMode class used to represent a video mode of the monitor and of the active window
    * Added a MonitorManager singleton class which is responsible for the creation and management of all the Monitor instances
    * Added a ContextSettings class that represents the OpenGL context settings of a window
    * Added an AABoxCollider struct that represents an Axis-Aligned Box Collider of an n-dimensional entity or can simply be used as a container
    * Added a Time class that represents a time value in seconds, milliseconds or microseconds
    * Added a Clock class used to measure elapsed time
    * Added a Color utility class for manipulating RGBA colors
    * Added a Window class that represents the application's window
    * Added an Event class that represents a system event and its properties, and several derived classes representing specific system events
    * Added a Keyboard namespace containing a collection of functions that provide real-time access to the keyboard's state
    * Added a Mouse namespace containing a collection of functions that provide real-time access to the mouse's state
    * Added an Application singleton class that manages the entire application
    * Added an EventQueue singleton class that stores the generated input events until they're polled
    * Added an InputManager namespace containing several callback functions that create and enqueue input events
    * Added a State class that acts as a layer used to separate storage of game elements and ease of management of game levels (main menu, game - level 1, etc.)
    * Added a StateStack singleton class used internally to manage the user-created State instances
  Updates
    - The minimum version of C++ is now C++11 but still takes advantage of C++17 if available
    - The logging macros can now also be used in Release mode, Debug-only macros must use the AEON_DEBUG macro to differentiate them
    - The debug logs will only be displayed to the console in Debug mode
  Bug Fixes
    ~ Fixed a bug in the Vector template struct's comparison operators

v0.2.0 | 2019.07.01
  Features
    * Added a Vector partially specialized template struct used for 2-dimensional mathematical vectors
    * Added a Vector partially specialized template struct used for 3-dimensional mathematical vectors
    * Added a Vector partially specialized template struct used for 3-dimensional mathematical vectors with a homogeneous component
    * Added a Matrix template struct for NxM (3x2, 5x4, 4x4) matrices in column-major
  Updates
    - Improved the documentation of certain functions in Math/Misc.h
  Bug Fixes
    ~ Fixed documentation errors in Math/Vector.h

v0.1.0 | 2019.06.14
  Features
    * Added a DebugLogger singleton class used to log debug information concerning Aeon
    * Added a FileSystem static class that provides I/O access to system files
    * Added a Math namespace providing various mathematical utility functions
    * Added a Vector primary template struct used for n-dimensional mathematical vectors